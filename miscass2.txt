typedef struct game_info_struct {

	// Index in color_dict table of codes
	int    color_ids[MAX_COLORS];

	// Color order
	int    color_order[MAX_COLORS];

	// Initial and goal positions
	pos_t  init_pos[MAX_COLORS];
	pos_t  goal_pos[MAX_COLORS];

	// Length/width of game board
	size_t size;

	// Number of colors present
	size_t num_colors;

	// Color table for looking up color ID
	uint8_t color_tbl[128];

  
} game_info_t;

typedef struct game_state_struct {

	// State of each cell in the world; a little wasteful to duplicate,
	// since only one changes on each move, but necessary for DIJKSSTRA
	// (would not be needed for depth-first search).
	cell_t   cells[MAX_CELLS];

	// Head position
	pos_t    pos[MAX_COLORS];

	// How many free cells?
	uint8_t  num_free;

	// Which was the last color / endpoint
	uint8_t  last_color;

	// Bitflag indicating whether each color has been completed or not
	// (cur_pos is adjacent to goal_pos).
	uint16_t completed;
  
} game_state_t;

enum {
	TYPE_FREE = 0, // Free space
	TYPE_PATH = 1, // Path between init & goal
	TYPE_INIT = 2, // Starting point
	TYPE_GOAL = 3  // Goal position
};

int game_num_free_pos(const game_info_t* info, const game_state_t* state, pos_t pos);

MAX_CELLS = (MAX_SIZE+1)*MAX_SIZE-1,

cell_t


pos_t pos_from_coords(pos_t x, pos_t y);
void pos_get_coords(pos_t p, int* x, int* y);g



int game_check_deadends(const game_info_t* info,
                        const game_state_t* state) {

  size_t color = state->last_color;
  if (color >= info->num_colors) { return 0; }
  
  pos_t cur_pos = state->pos[color];

  int x, y;
  pos_get_coords(cur_pos, &x, &y);

  for (int dir=0; dir<4; ++dir) {
    pos_t neighbor_pos = offset_pos(info, x, y, dir);
    if (neighbor_pos != INVALID_POS &&
        !state->cells[neighbor_pos] &&
        game_is_deadend(info, state, neighbor_pos)) {
      return 1;
    }
  }

  return 0;

}


pos_t offset_pos(const game_info_t* info, int x, int y, int dir);
pos_t pos_offset_pos(const game_info_t* info, pos_t pos, int dir);




int game_is_deadend(const game_info_t* info,
                    const game_state_t* state,
                    pos_t pos) {

  assert(pos != INVALID_POS && !state->cells[pos]);

  int x, y;
  pos_get_coords(pos, &x, &y);
  
  int num_free = 0;

  for (int dir=0; dir<4; ++dir) {
    pos_t neighbor_pos = offset_pos(info, x, y, dir);
    if (neighbor_pos != INVALID_POS) {
      if (!state->cells[neighbor_pos]) {
        ++num_free;
      } else {
        for (size_t color=0; color<info->num_colors; ++color) {
          if (state->completed & (1 << color)) {
            continue;
          }
          if (neighbor_pos == state->pos[color] ||
              neighbor_pos == info->goal_pos[color]) {
            ++num_free;
          }
        }
                                                                 
      }
    }
  }

  return num_free <= 1;

}